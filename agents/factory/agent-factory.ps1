<#
.SYNOPSIS
    Agent Factory - Dynamic agent spawning system
.DESCRIPTION
    Creates specialist agents on-demand based on Master's instructions.
    Manages agent lifecycle: spawn, monitor, terminate idle agents.
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("coding", "testing", "review", "documentation", "deployment", "git")]
    [string]$AgentType,
    
    [Parameter(Mandatory=$false)]
    [string]$AgentId,
    
    [Parameter(Mandatory=$false)]
    [hashtable]$Skills,
    
    [Parameter(Mandatory=$false)]
    [string]$Model = "codellama:7b"
)

$ErrorActionPreference = "Stop"

# Generate agent ID if not provided
if (-not $AgentId) {
    $AgentId = "$AgentType-agent-$(Get-Date -Format 'yyyyMMddHHmmss')"
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  AGENT FACTORY: SPAWNING $AgentType" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

$scriptRoot = Split-Path -Parent $PSScriptRoot

# Agent template generator
function New-AgentScript {
    param(
        [string]$Type,
        [string]$Id,
        [hashtable]$AgentSkills,
        [string]$LLMModel
    )
    
    $agentDir = "$scriptRoot\$Type"
    if (-not (Test-Path $agentDir)) {
        New-Item -Path $agentDir -ItemType Directory -Force | Out-Null
    }
    
    $agentScript = "$agentDir\$Type-agent.ps1"
    
    # Check if base agent script exists
    if (Test-Path $agentScript) {
        Write-Host "  ✓ Using existing $Type agent template" -ForegroundColor Green
        return $agentScript
    }
    
    # Generate new agent script
    Write-Host "  Creating new $Type agent script..." -ForegroundColor Yellow
    
    $scriptContent = @"
<#
.SYNOPSIS
    $Type Agent - AI-powered specialist
.DESCRIPTION
    Auto-generated by Agent Factory
    Skills: $($AgentSkills.Keys -join ', ')
    Model: $LLMModel
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=`$false)]
    [string]`$AgentId = "$Id",
    
    [Parameter(Mandatory=`$false)]
    [switch]`$WatchMode,
    
    [Parameter(Mandatory=`$false)]
    [string]`$OllamaUrl = "http://localhost:11434"
)

`$ErrorActionPreference = "Stop"

# Agent Configuration
`$global:AgentConfig = @{
    AgentId = `$AgentId
    Type = "$Type"
    Skills = @($($AgentSkills.Keys | ForEach-Object { "`"$_`"" } | Join-String -Separator ', '))
    Model = "$LLMModel"
    OllamaUrl = `$OllamaUrl
    Status = "idle"
    TasksProcessed = 0
}

`$scriptRoot = Split-Path -Parent `$PSScriptRoot

# Logging
function Write-AgentLog {
    param([string]`$Message, [string]`$Level = "INFO")
    
    `$logEntry = @{
        timestamp = (Get-Date -Format "o")
        agent_id = `$global:AgentConfig.AgentId
        agent_type = `$global:AgentConfig.Type
        level = `$Level
        message = `$Message
    } | ConvertTo-Json -Compress
    
    Add-Content -Path "`$scriptRoot\..\logs\agents\$Type.jsonl" -Value `$logEntry
    Write-Host "[`$(`$global:AgentConfig.AgentId)] `$Message" -ForegroundColor $(if (`$Level -eq "ERROR") { "Red" } elseif (`$Level -eq "SUCCESS") { "Green" } else { "Cyan" })
}

# LLM Integration
function Invoke-AgentLLM {
    param([string]`$Prompt, [string]`$SystemPrompt = "You are a $Type specialist.")
    
    try {
        `$requestBody = @{
            model = `$global:AgentConfig.Model
            prompt = `$Prompt
            system = `$SystemPrompt
            stream = `$false
        } | ConvertTo-Json
        
        `$response = Invoke-RestMethod -Uri "`$(`$global:AgentConfig.OllamaUrl)/api/generate" ``
            -Method Post ``
            -Body `$requestBody ``
            -ContentType "application/json" ``
            -TimeoutSec 60
        
        return `$response.response
    } catch {
        Write-AgentLog "LLM error: `$_" -Level "ERROR"
        return `$null
    }
}

# Task Processing
function Invoke-TaskProcessing {
    param([object]`$Task)
    
    Write-AgentLog "Processing task: `$(`$Task.task_id)"
    `$global:AgentConfig.Status = "busy"
    
    try {
        # Use AI to process task
        `$prompt = "Task: `$(`$Task.action)`n`nProvide solution:"
        `$result = Invoke-AgentLLM -Prompt `$prompt
        
        if (`$result) {
            `$output = @{
                packet_id = `$Task.packet_id
                task_id = `$Task.task_id
                agent_id = `$global:AgentConfig.AgentId
                status = "completed"
                result = `$result
                completed_at = (Get-Date -Format "o")
            }
            
            `$outputFile = "`$scriptRoot\..\bus\outbox\`$(`$Task.packet_id)-result.json"
            `$output | ConvertTo-Json -Depth 10 | Set-Content `$outputFile
            
            `$global:AgentConfig.TasksProcessed++
            Write-AgentLog "Task completed: `$(`$Task.task_id)" -Level "SUCCESS"
        }
    } catch {
        Write-AgentLog "Task failed: `$_" -Level "ERROR"
    } finally {
        `$global:AgentConfig.Status = "idle"
    }
}

# Watch Mode
if (`$WatchMode) {
    Write-Host "`n$Type Agent `$AgentId watching for tasks..." -ForegroundColor Cyan
    
    while (`$true) {
        # Look for tasks assigned to this agent type
        `$tasks = Get-ChildItem "`$scriptRoot\..\bus\inbox\*-$Type.json" -ErrorAction SilentlyContinue
        
        foreach (`$taskFile in `$tasks) {
            try {
                `$task = Get-Content `$taskFile.FullName | ConvertFrom-Json
                Invoke-TaskProcessing -Task `$task
                
                # Move to processed
                Move-Item `$taskFile.FullName "`$scriptRoot\..\bus\deadletter\processed-`$(Split-Path `$taskFile -Leaf)"
            } catch {
                Write-AgentLog "Error: `$_" -Level "ERROR"
            }
        }
        
        Start-Sleep -Seconds 3
    }
} else {
    Write-Host "$Type Agent ready. Use -WatchMode to start processing." -ForegroundColor Yellow
}
"@
    
    $scriptContent | Set-Content $agentScript
    Write-Host "  ✓ Created $agentScript" -ForegroundColor Green
    
    return $agentScript
}

# Create agent script
$agentScriptPath = New-AgentScript -Type $AgentType -Id $AgentId -AgentSkills $Skills -LLMModel $Model

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  AGENT SPAWNED: $AgentId" -ForegroundColor Green
Write-Host "========================================`n" -ForegroundColor Cyan

Write-Host "Script: $agentScriptPath" -ForegroundColor Cyan
Write-Host "Skills: $($Skills.Keys -join ', ')" -ForegroundColor Yellow
Write-Host "Model: $Model`n" -ForegroundColor Yellow

# Return agent info
return @{
    AgentId = $AgentId
    Type = $AgentType
    Script = $agentScriptPath
    Skills = $Skills
    Model = $Model
}
