{
    "Civic Agent Function": {
        "scope": "powershell",
        "prefix": "civic-function",
        "body": [
            "function ${1:FunctionName} {",
            "    <#",
            "    .SYNOPSIS",
            "        ${2:Brief description}",
            "    .DESCRIPTION",
            "        ${3:Detailed description}",
            "    .PARAMETER ${4:ParamName}",
            "        ${5:Parameter description}",
            "    .EXAMPLE",
            "        ${1:FunctionName} -${4:ParamName} \"${6:Value}\"",
            "    .NOTES",
            "        Part of AI-Powered Civic Infrastructure",
            "        Requires: DAO warrant for execution",
            "        Audit: Logged to council_ledger.jsonl",
            "    #>",
            "    [CmdletBinding()]",
            "    param(",
            "        [Parameter(Mandatory = \\$true)]",
            "        [string]\\$${4:ParamName}",
            "    )",
            "    ",
            "    Write-Host \"[CIVIC] ${1:FunctionName}: \\$${4:ParamName}\" -ForegroundColor Cyan",
            "    ",
            "    # Log to audit trail",
            "    \\$auditEntry = @{",
            "        timestamp = (Get-Date).ToString('o')",
            "        function = '${1:FunctionName}'",
            "        parameters = @{ ${4:ParamName} = \\$${4:ParamName} }",
            "        user = \\$env:USERNAME",
            "        computer = \\$env:COMPUTERNAME",
            "    }",
            "    \\$auditEntry | ConvertTo-Json -Compress | Add-Content \"logs\\council_ledger.jsonl\"",
            "    ",
            "    ${0:# Function logic here}",
            "}"
        ],
        "description": "Create a civic infrastructure function with DAO governance"
    },
    "AI Agent Request Packet": {
        "scope": "powershell",
        "prefix": "ai-request",
        "body": [
            "\\$requestPacket = @{",
            "    packet_id = \"${1:task-name}-\" + (Get-Date -Format 'yyyyMMdd-HHmmss')",
            "    timestamp = (Get-Date).ToString('o')",
            "    user_request = \"${2:Describe what you want AI to do}\"",
            "    priority = \"${3|high,normal,low|}\"",
            "    requirements = @(",
            "        \"${4:requirement1}\"",
            "        \"${5:requirement2}\"",
            "    )",
            "    context = @{",
            "        user = \\$env:USERNAME",
            "        computer = \\$env:COMPUTERNAME",
            "        workspace = \\$PSScriptRoot",
            "    }",
            "    expected_deliverables = @(",
            "        \"${6:deliverable1}\"",
            "    )",
            "}",
            "",
            "# Submit to message bus",
            "\\$inboxPath = \"bus\\inbox\\\\${3}\"",
            "\\$packetFile = Join-Path \\$inboxPath \"\\$(\\$requestPacket.packet_id).json\"",
            "\\$requestPacket | ConvertTo-Json -Depth 5 | Set-Content \\$packetFile",
            "Write-Host \"[REQUEST] Submitted to AI: \\$packetFile\" -ForegroundColor Green"
        ],
        "description": "Create an AI agent request packet for the message bus"
    },
    "DAO Warrant Check": {
        "scope": "powershell",
        "prefix": "warrant-check",
        "body": [
            "# Check for valid DAO warrant",
            "\\$warrantPath = \"council\\warrants\\active\\${1:operation-name}-warrant.json\"",
            "if (-not (Test-Path \\$warrantPath)) {",
            "    Write-Host \"[ERROR] No valid warrant found for ${1:operation-name}\" -ForegroundColor Red",
            "    Write-Host \"[INFO] Create warrant: New-Warrant -Operation '${1:operation-name}' -Duration 7\" -ForegroundColor Yellow",
            "    throw \"Operation requires DAO warrant\"",
            "}",
            "",
            "\\$warrant = Get-Content \\$warrantPath | ConvertFrom-Json",
            "\\$expiryDate = [datetime]\\$warrant.expires_at",
            "if (\\$expiryDate -lt (Get-Date)) {",
            "    Write-Host \"[ERROR] Warrant expired: \\$expiryDate\" -ForegroundColor Red",
            "    throw \"Warrant expired\"",
            "}",
            "",
            "Write-Host \"[WARRANT] Valid until: \\$expiryDate\" -ForegroundColor Green",
            "${0}"
        ],
        "description": "Add DAO warrant validation to a script"
    },
    "Audit Trail Entry": {
        "scope": "powershell",
        "prefix": "audit-log",
        "body": [
            "# Log to audit trail",
            "\\$auditEntry = @{",
            "    timestamp = (Get-Date).ToString('o')",
            "    event_type = \"${1:event_type}\"",
            "    action = \"${2:action_description}\"",
            "    user = \\$env:USERNAME",
            "    computer = \\$env:COMPUTERNAME",
            "    ${3:data} = ${4:\\$value}",
            "    result = \"${5|success,failure,warning|}\"",
            "}",
            "\\$auditEntry | ConvertTo-Json -Compress | Add-Content \"logs\\council_ledger.jsonl\"",
            "${0}"
        ],
        "description": "Add an entry to the DAO audit trail"
    },
    "Ollama AI Invocation": {
        "scope": "powershell",
        "prefix": "ollama-invoke",
        "body": [
            "# Invoke local AI (Ollama)",
            "\\$aiRequest = @{",
            "    model = \"${1|codellama:7b,llama2:7b,codellama:13b|}\"",
            "    prompt = \"${2:Your prompt here}\"",
            "    temperature = ${3:0.3}",
            "    max_tokens = ${4:500}",
            "    stream = \\$false",
            "} | ConvertTo-Json",
            "",
            "try {",
            "    \\$response = Invoke-RestMethod -Uri \"http://localhost:11434/api/generate\" `",
            "        -Method Post `",
            "        -Body \\$aiRequest `",
            "        -ContentType \"application/json\"",
            "    ",
            "    \\$aiResult = \\$response.response",
            "    Write-Host \"[AI] Response: \\$aiResult\" -ForegroundColor Cyan",
            "    ${0:# Process AI response}",
            "}",
            "catch {",
            "    Write-Host \"[ERROR] AI invocation failed: \\$_\" -ForegroundColor Red",
            "}"
        ],
        "description": "Invoke Ollama AI with a prompt"
    },
    "Knowledge Base Entry": {
        "scope": "powershell",
        "prefix": "kb-save",
        "body": [
            "# Save to knowledge base",
            "\\$knowledgeEntry = @{",
            "    timestamp = (Get-Date).ToString('o')",
            "    category = \"${1|patterns,context,lessons|}\"",
            "    title = \"${2:Title}\"",
            "    content = \"${3:Content}\"",
            "    tags = @(\"${4:tag1}\", \"${5:tag2}\")",
            "    metadata = @{",
            "        source = \"${6:source}\"",
            "        confidence = ${7:0.8}",
            "    }",
            "}",
            "",
            "\\$kbPath = \"knowledge\\${1}\\$(Get-Date -Format 'yyyyMMdd-HHmmss')-${2}.jsonl\"",
            "\\$knowledgeEntry | ConvertTo-Json -Compress | Add-Content \\$kbPath",
            "Write-Host \"[KB] Saved: \\$kbPath\" -ForegroundColor Green",
            "${0}"
        ],
        "description": "Save an entry to the knowledge base"
    }
}
